"use strict";
/*
* @adonisjs/ace
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pad_right_1 = __importDefault(require("pad-right"));
const kleur_1 = require("kleur");
const sortAndGroupCommands_1 = require("./sortAndGroupCommands");
/**
 * Wraps the command arg inside `<>` or `[]` brackets based upon if it's
 * required or not.
 */
function wrapArg(arg) {
    const displayName = arg.type === 'spread' ? `${arg.name}...` : arg.name;
    return arg.required ? `<${displayName}>` : `[${displayName}]`;
}
/**
 * Returns an array of flags for displaying the help screen
 */
function getFlagsForDisplay(flags) {
    return flags.map(({ name, type, alias, description }) => {
        /**
         * Display name is the way we want to display a single flag in the
         * list of flags
         */
        const displayName = alias ? `-${alias}, --${name}` : `--${name}`;
        /**
         * The type hints the user about the expectation on the flag type. We only
         * print the type, when flag is not a boolean.
         */
        let displayType = '';
        switch (type) {
            case 'array':
                displayType = 'string[]';
                break;
            case 'numArray':
                displayType = 'number[]';
                break;
            case 'string':
                displayType = 'string';
                break;
            case 'boolean':
                displayType = 'boolean';
                break;
            case 'number':
                displayType = 'number';
                break;
        }
        return {
            displayName,
            displayType,
            description,
            width: displayName.length + displayType.length,
        };
    });
}
/**
 * Returns an array of args for displaying the help screen
 */
function getArgsForDisplay(args) {
    return args.map(({ name, description }) => {
        return {
            displayName: name,
            description: description,
            width: name.length,
        };
    });
}
function getCommandsForDisplay(commands) {
    return commands.map(({ commandName, description }) => {
        return { displayName: commandName, description, width: commandName.length };
    });
}
/**
 * Prints help for all the commands by sorting them in alphabetical order
 * and grouping them as per their namespace.
 */
function printHelp(commands, flags) {
    const flagsList = getFlagsForDisplay(flags);
    const commandsList = getCommandsForDisplay(commands);
    /**
     * Get width of longest command name.
     */
    const maxWidth = Math.max.apply(Math, flagsList.concat(commandsList).map(({ width }) => width));
    /**
     * Sort commands and group them, so that we can print them as per
     * the namespace they belongs to
     */
    sortAndGroupCommands_1.sortAndGroupCommands(commands).forEach(({ group, commands: groupCommands }) => {
        console.log('');
        if (group === 'root') {
            console.log(kleur_1.bold(kleur_1.yellow('Available commands')));
        }
        else {
            console.log(kleur_1.bold(kleur_1.yellow(group)));
        }
        groupCommands.forEach(({ commandName, description }) => {
            console.log(`  ${kleur_1.green(pad_right_1.default(commandName, maxWidth, ' '))}  ${kleur_1.dim(description)}`);
        });
    });
    if (flagsList.length) {
        console.log('');
        console.log(kleur_1.bold(kleur_1.yellow('Global Flags')));
        flagsList.forEach(({ displayName, displayType, description = '', width }) => {
            const whiteSpace = pad_right_1.default('', maxWidth - width, ' ');
            console.log(`  ${kleur_1.green(displayName)} ${kleur_1.dim(displayType)} ${whiteSpace}  ${kleur_1.dim(description)}`);
        });
    }
}
exports.printHelp = printHelp;
/**
 * Prints help for a single command
 */
function printHelpFor(command) {
    if (command.description) {
        console.log('');
        console.log(command.description);
    }
    console.log('');
    console.log(`${kleur_1.yellow('Usage:')} ${command.commandName} ${kleur_1.dim(command.args.map(wrapArg).join(' '))}`);
    const flags = getFlagsForDisplay(command.flags);
    const args = getArgsForDisplay(command.args);
    /**
     * Getting max width to keep flags and args symmetric
     */
    const maxWidth = Math.max.apply(Math, flags.concat(args).map(({ width }) => width));
    if (args.length) {
        console.log('');
        console.log(kleur_1.bold(kleur_1.yellow('Arguments')));
        args.forEach(({ displayName, description = '', width }) => {
            const whiteSpace = pad_right_1.default('', maxWidth - width, ' ');
            console.log(`  ${kleur_1.green(displayName)} ${whiteSpace}   ${kleur_1.dim(description)}`);
        });
    }
    if (flags.length) {
        console.log('');
        console.log(kleur_1.bold(kleur_1.yellow('Flags')));
        flags.forEach(({ displayName, displayType, description = '', width }) => {
            const whiteSpace = pad_right_1.default('', maxWidth - width, ' ');
            console.log(`  ${kleur_1.green(displayName)} ${kleur_1.dim(displayType)} ${whiteSpace}  ${kleur_1.dim(description)}`);
        });
    }
}
exports.printHelpFor = printHelpFor;
