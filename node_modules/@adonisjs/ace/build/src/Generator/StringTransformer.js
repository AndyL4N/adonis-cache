"use strict";
/*
 * @adonisjs/ace
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const pluralize_1 = __importDefault(require("pluralize"));
const snake_case_1 = require("snake-case");
const camel_case_1 = require("camel-case");
const pascal_case_1 = require("pascal-case");
/**
 * Exposes the API to transform a string
 */
class StringTransformer {
    constructor(input) {
        this.input = input;
    }
    /**
     * Cleans suffix from the input.
     */
    cleanSuffix(suffix) {
        if (!suffix) {
            return this;
        }
        this.input = this.input.replace(new RegExp(`[-_]?${suffix}$`, 'i'), '');
        return this;
    }
    /**
     * Cleans prefix from the input.
     */
    cleanPrefix(prefix) {
        if (!prefix) {
            return this;
        }
        this.input = this.input.replace(new RegExp(`^${prefix}[-_]?`, 'i'), '');
        return this;
    }
    /**
     * Add suffix to the file name
     */
    addSuffix(suffix) {
        if (!suffix) {
            return this;
        }
        this.input = `${this.input}_${suffix}`;
        return this;
    }
    /**
     * Add prefix to the file name
     */
    addPrefix(prefix) {
        if (!prefix) {
            return this;
        }
        this.input = `${prefix}_${this.input}`;
        return this;
    }
    /**
     * Changes the name form by converting it to singular
     * or plural case
     */
    changeForm(form, ignoreList) {
        if (!form) {
            return this;
        }
        /**
         * Do not change form when word is in ignore list
         */
        if ((ignoreList || []).find((word) => word.toLowerCase() === this.input.toLowerCase())) {
            return this;
        }
        this.input = pluralize_1.default[form](this.input);
        return this;
    }
    /**
     * Changes the input case
     */
    changeCase(pattern) {
        switch (pattern) {
            case 'camelcase':
                this.input = camel_case_1.camelCase(this.input);
                return this;
            case 'pascalcase':
                this.input = pascal_case_1.pascalCase(this.input);
                return this;
            case 'snakecase':
                this.input = snake_case_1.snakeCase(this.input);
                return this;
            default:
                return this;
        }
    }
    /**
     * Drops the extension from the input
     */
    dropExtension() {
        this.input = this.input.replace(new RegExp(`${path_1.extname(this.input)}$`), '');
        return this;
    }
    /**
     * Returns the transformed value
     */
    toValue() {
        return this.input;
    }
}
exports.StringTransformer = StringTransformer;
